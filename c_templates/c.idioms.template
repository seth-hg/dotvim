== Idioms.function == map:if, shortcut:f  ==
/***********************************************************************
 * Description: 
 * Input: 
 * Output: 
 * Return: 
 ***********************************************************************/
void<CURSOR> |?FUNCTION_NAME|() {
}  /* end of function |FUNCTION_NAME| */

== Idioms.function-static == map:isf, shortcut:t  ==
/***********************************************************************
 * Description: 
 * Input: 
 * Output: 
 * Return: 
 ***********************************************************************/
static void<CURSOR> |?FUNCTION_NAME| () {
}  /* end of function |FUNCTION_NAME| */

== Idioms.main == map:im, shortcut:m  ==
int main(int argc, char *argv[]) {
<CURSOR>
<SPLIT>	return 0;
}

== Idioms.enum == map:ie, shortcut:e  ==
enum |?ENUM_NAME| {<CURSOR>
<SPLIT>};  /* end of enum |ENUM_NAME| */

typedef enum |ENUM_NAME| |ENUM_NAME:c|;
== Idioms.struct == map:is, shortcut:s  ==
struct |?STRUCT_NAME| {<CURSOR>
<SPLIT>};  /* end of struct |STRUCT_NAME| */

typedef struct |STRUCT_NAME| |STRUCT_NAME:c|;
== Idioms.union == map:iu, shortcut:u  ==
union |?UNION_NAME| {<CURSOR>
<SPLIT>};  /* end of union |UNION_NAME| */

typedef union |UNION_NAME| |UNION_NAME:c|;
== Idioms.scanf == map:isc, shortcut:s, insert  ==
scanf("<CURSOR>", &);
== Idioms.printf == map:ipr, shortcut:p, insert  ==
printf("<CURSOR>\n");
== Idioms.sizeof == map:isi, shortcut:s, insert  ==
sizeof(<CURSOR><SPLIT>)
== Idioms.assert == map:ias, shortcut:a, insert  ==
assert(<CURSOR><SPLIT>);
== Idioms.fprintf == map:ifpr, shortcut:f, insert  ==
fprintf(|?FILEPOINTER|, "<CURSOR>\n", );
== Idioms.fscanf == map:ifsc, shortcut:f, insert  ==
fscanf(|?FILEPOINTER|, "<CURSOR>", &);
